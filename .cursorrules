# Zanwik Dashboard - Cursor Rules for Efficient Development

## 📋 Rule Organization
- Main rules are in `.cursorrules`
- Specialized rules are in `.cursor/rules/` directory
- Component patterns: `.cursor/rules/component-patterns.mdc`
- API patterns: `.cursor/rules/api-patterns.mdc`
- Performance: `.cursor/rules/performance.mdc`
- Debugging: `.cursor/rules/debugging.mdc`

## 🎯 Code Quality & Consistency
- Always use TypeScript for new files
- Use consistent naming: camelCase for variables, PascalCase for components
- Add JSDoc comments for complex functions
- Use meaningful variable names, avoid abbreviations
- Follow ESLint and Prettier rules strictly
- Remove unused imports and variables
- Use absolute imports when possible
- Group imports by type (React, third-party, local)

## ⚛️ React Best Practices
- Use functional components with hooks
- Extract reusable logic into custom hooks
- Use React.memo for expensive components
- Implement proper error boundaries
- Use proper prop types or TypeScript interfaces
- Keep components small and focused

## 🚀 Performance & Optimization
- Use React.lazy for code splitting
- Implement proper loading states
- Use useMemo and useCallback for expensive operations
- Optimize bundle size with tree shaking
- Use proper key props in lists
- Avoid inline object/function creation in render
- Implement request caching and debouncing
- Use pagination for large datasets
- Monitor Core Web Vitals
- Set up performance budgets

## 🛡️ Error Handling
- Always handle async errors with try-catch
- Implement proper error boundaries
- Use meaningful error messages
- Log errors for debugging
- Provide fallback UI for error states

## 🔧 Development Workflow
- Write tests for critical functionality
- Use meaningful commit messages
- Document complex business logic
- Keep dependencies up to date
- Use environment variables for configuration
- Use React DevTools for debugging
- Implement hot reloading for faster development
- Use source maps for better debugging
- Set up proper development environment

## 📁 File Organization
- Group related components in folders
- Use index files for clean imports
- Separate business logic from UI components
- Keep utility functions organized
- Use consistent file naming

## 🎨 UI/UX Guidelines
- Use consistent spacing and typography
- Implement proper loading states
- Provide meaningful feedback for user actions
- Ensure accessibility standards
- Use semantic HTML elements

## 🔒 Security Best Practices
- Validate all user inputs
- Sanitize data before rendering
- Use proper authentication checks
- Implement proper CORS policies
- Log security events

## 📊 Database & API
- Use proper error handling for API calls
- Implement retry logic for failed requests
- Cache frequently accessed data
- Use proper database indexing
- Validate data at both client and server

## 🧪 Testing
- Write unit tests for utilities
- Test critical user flows
- Mock external dependencies
- Use meaningful test descriptions
- Maintain good test coverage
- Test error boundaries and edge cases
- Implement integration tests for API calls
- Use proper test isolation
- Test accessibility features
- Monitor test performance

## 🚀 Deployment & DevOps
- Use environment-specific configurations
- Implement proper logging
- Monitor application performance
- Use proper CI/CD pipelines
- Backup critical data regularly 