// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  avatar        String?
  bio           String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Seller profile
  isSeller      Boolean   @default(false)
  stripeAccountId String?
  commissionRate Float    @default(0.15) // 15% default commission

  // Relationships
  products      Product[]
  orders        Order[]
  reviews       Review[]
  favorites     Favorite[]
  notifications Notification[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  originalPrice Float?
  category    String
  tags        String[]
  images      String[]
  fileUrl     String
  fileSize    Int
  downloads   Int       @default(0)
  rating      Float     @default(0)
  reviewCount Int       @default(0)
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Seller relationship
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Relationships
  orders      Order[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("products")
}

model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  amount        Float
  commission    Float
  status        OrderStatus @default(PENDING)
  paymentIntent String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  buyerId       String
  buyer         User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relationships
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED
  REFUNDED
}

enum NotificationType {
  ORDER_PLACED
  ORDER_COMPLETED
  PAYMENT_RECEIVED
  NEW_REVIEW
  PRODUCT_APPROVED
  PRODUCT_REJECTED
} 