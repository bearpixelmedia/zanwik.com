{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../utils/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Check if user is authenticated on mount\nuseEffect(()=>{const checkAuth=async()=>{try{const{data:{user}}=await supabase.auth.getUser();setUser(user);}catch(error){console.error('Auth check failed:',error);setUser(null);}setLoading(false);};checkAuth();// Listen for auth state changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange((event,session)=>{console.log('Auth state changed:',event,session);setUser((session===null||session===void 0?void 0:session.user)||null);setLoading(false);});return()=>subscription.unsubscribe();},[]);// Login function\nconst login=async(email,password)=>{try{console.log('Attempting login with:',email);const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){console.error('Login error:',error);throw new Error(error.message);}console.log('Login successful:',data);setUser(data.user);return{success:true};}catch(error){console.error('Login failed:',error);throw error;}};// Register function\nconst register=async userData=>{try{const{data,error}=await supabase.auth.signUp({email:userData.email,password:userData.password});if(error)throw error;setUser(data.user);return{success:true};}catch(error){throw error;}};// Logout function\nconst logout=async()=>{try{const{error}=await supabase.auth.signOut();if(error)throw error;setUser(null);}catch(error){console.error('Logout failed:',error);throw error;}};// Update user profile\nconst updateProfile=async profileData=>{try{const{data,error}=await supabase.auth.updateUser(profileData);if(error)throw error;setUser(data.user);return{success:true};}catch(error){throw error;}};// Change password\nconst changePassword=async newPassword=>{try{const{error}=await supabase.auth.updateUser({password:newPassword});if(error)throw error;return{success:true};}catch(error){throw error;}};// Check if user has permission (simplified for demo)\nconst hasPermission=(resource,action)=>{if(!user)return false;// For demo purposes, return true for all permissions\nreturn true;};// Check if user has role\nconst hasRole=roles=>{if(!user)return false;const allowedRoles=Array.isArray(roles)?roles:[roles];// For demo purposes, assume all users have admin role\nreturn allowedRoles.includes('admin');};// Get user's project permissions\nconst getProjectPermissions=projectId=>{if(!user)return{read:false,write:false,deploy:false,admin:false};// For demo purposes, return full permissions\nreturn{read:true,write:true,deploy:true,admin:true};};// Update user preferences\nconst updatePreferences=async preferences=>{try{const{data,error}=await supabase.auth.updateUser({data:{preferences}});if(error)throw error;setUser(data.user);return{success:true};}catch(error){throw error;}};// Get login history (simplified)\nconst getLoginHistory=async()=>{// Supabase doesn't provide login history by default\n// You'd need to implement this with a custom table\nreturn[];};const value={user,loading,login,register,logout,updateProfile,changePassword,hasPermission,hasRole,getProjectPermissions,updatePreferences,getLoginHistory};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuth","data","auth","getUser","error","console","subscription","onAuthStateChange","event","session","log","unsubscribe","login","email","password","signInWithPassword","message","success","register","userData","signUp","logout","signOut","updateProfile","profileData","updateUser","changePassword","newPassword","hasPermission","resource","action","hasRole","roles","allowedRoles","Array","isArray","includes","getProjectPermissions","projectId","read","write","deploy","admin","updatePreferences","preferences","getLoginHistory","value","Provider"],"sources":["/Users/whitefoxstudios/money/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n\n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      console.log('Auth state changed:', event, session);\n      setUser(session?.user || null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      console.log('Attempting login with:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        console.error('Login error:', error);\n        throw new Error(error.message);\n      }\n\n      console.log('Login successful:', data);\n      setUser(data.user);\n      return { success: true };\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email: userData.email,\n        password: userData.password\n      });\n\n      if (error) throw error;\n\n      setUser(data.user);\n      return { success: true };\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw error;\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      const { data, error } = await supabase.auth.updateUser(profileData);\n      if (error) throw error;\n      setUser(data.user);\n      return { success: true };\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Change password\n  const changePassword = async (newPassword) => {\n    try {\n      const { error } = await supabase.auth.updateUser({ password: newPassword });\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Check if user has permission (simplified for demo)\n  const hasPermission = (resource, action) => {\n    if (!user) return false;\n    // For demo purposes, return true for all permissions\n    return true;\n  };\n\n  // Check if user has role\n  const hasRole = (roles) => {\n    if (!user) return false;\n    const allowedRoles = Array.isArray(roles) ? roles : [roles];\n    // For demo purposes, assume all users have admin role\n    return allowedRoles.includes('admin');\n  };\n\n  // Get user's project permissions\n  const getProjectPermissions = (projectId) => {\n    if (!user) return { read: false, write: false, deploy: false, admin: false };\n    \n    // For demo purposes, return full permissions\n    return {\n      read: true,\n      write: true,\n      deploy: true,\n      admin: true\n    };\n  };\n\n  // Update user preferences\n  const updatePreferences = async (preferences) => {\n    try {\n      const { data, error } = await supabase.auth.updateUser({\n        data: { preferences }\n      });\n      if (error) throw error;\n      setUser(data.user);\n      return { success: true };\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Get login history (simplified)\n  const getLoginHistory = async () => {\n    // Supabase doesn't provide login history by default\n    // You'd need to implement this with a custom table\n    return [];\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    hasPermission,\n    hasRole,\n    getProjectPermissions,\n    updatePreferences,\n    getLoginHistory\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}