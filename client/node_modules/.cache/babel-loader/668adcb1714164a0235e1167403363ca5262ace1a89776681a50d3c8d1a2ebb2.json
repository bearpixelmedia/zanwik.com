{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{toast}from'react-hot-toast';import{auth,supabase}from'../utils/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Check if user is authenticated on mount\nuseEffect(()=>{const checkAuth=async()=>{try{const user=await auth.getCurrentUser();setUser(user);}catch(error){console.error('Auth check failed:',error);setUser(null);}setLoading(false);};checkAuth();// Listen for auth state changes\nconst{data:{subscription}}=auth.onAuthStateChange((event,session)=>{setUser((session===null||session===void 0?void 0:session.user)||null);setLoading(false);});return()=>subscription.unsubscribe();},[]);// Login function\nconst login=async(email,password)=>{try{const{user:userData}=await auth.signIn(email,password);setUser(userData);toast.success('Login successful!');return{success:true};}catch(error){const message=error.message||'Login failed';toast.error(message);return{success:false,error:message};}};// Register function\nconst register=async userData=>{try{const{user:newUser}=await auth.signUp(userData.email,userData.password);setUser(newUser);toast.success('Registration successful! Please check your email to verify your account.');return{success:true};}catch(error){const message=error.message||'Registration failed';toast.error(message);return{success:false,error:message};}};// Logout function\nconst logout=async()=>{try{await auth.signOut();setUser(null);toast.success('Logged out successfully');}catch(error){toast.error('Logout failed');}};// Update user profile\nconst updateProfile=async profileData=>{try{const{data,error}=await supabase.auth.updateUser(profileData);if(error)throw error;setUser(data.user);toast.success('Profile updated successfully!');return{success:true};}catch(error){const message=error.message||'Failed to update profile';toast.error(message);return{success:false,error:message};}};// Change password\nconst changePassword=async newPassword=>{try{const{error}=await supabase.auth.updateUser({password:newPassword});if(error)throw error;toast.success('Password changed successfully!');return{success:true};}catch(error){const message=error.message||'Failed to change password';toast.error(message);return{success:false,error:message};}};// Check if user has permission (simplified for demo)\nconst hasPermission=(resource,action)=>{if(!user)return false;// For demo purposes, return true for all permissions\n// In production, you'd check user metadata or roles\nreturn true;};// Check if user has role\nconst hasRole=roles=>{if(!user)return false;const allowedRoles=Array.isArray(roles)?roles:[roles];// For demo purposes, assume all users have admin role\nreturn allowedRoles.includes('admin');};// Get user's project permissions\nconst getProjectPermissions=projectId=>{if(!user)return{read:false,write:false,deploy:false,admin:false};// For demo purposes, return full permissions\nreturn{read:true,write:true,deploy:true,admin:true};};// Update user preferences\nconst updatePreferences=async preferences=>{try{const{data,error}=await supabase.auth.updateUser({data:{preferences}});if(error)throw error;setUser(data.user);toast.success('Preferences updated successfully!');return{success:true};}catch(error){const message=error.message||'Failed to update preferences';toast.error(message);return{success:false,error:message};}};// Get login history (simplified)\nconst getLoginHistory=async()=>{// Supabase doesn't provide login history by default\n// You'd need to implement this with a custom table\nreturn[];};const value={user,loading,login,register,logout,updateProfile,changePassword,hasPermission,hasRole,getProjectPermissions,updatePreferences,getLoginHistory};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","auth","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuth","getCurrentUser","error","console","data","subscription","onAuthStateChange","event","session","unsubscribe","login","email","password","userData","signIn","success","message","register","newUser","signUp","logout","signOut","updateProfile","profileData","updateUser","changePassword","newPassword","hasPermission","resource","action","hasRole","roles","allowedRoles","Array","isArray","includes","getProjectPermissions","projectId","read","write","deploy","admin","updatePreferences","preferences","getLoginHistory","value","Provider"],"sources":["/Users/whitefoxstudios/money/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { auth, supabase } from '../utils/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const user = await auth.getCurrentUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n\n    // Listen for auth state changes\n    const { data: { subscription } } = auth.onAuthStateChange((event, session) => {\n      setUser(session?.user || null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      const { user: userData } = await auth.signIn(email, password);\n      setUser(userData);\n      toast.success('Login successful!');\n      return { success: true };\n    } catch (error) {\n      const message = error.message || 'Login failed';\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      const { user: newUser } = await auth.signUp(userData.email, userData.password);\n      setUser(newUser);\n      toast.success('Registration successful! Please check your email to verify your account.');\n      return { success: true };\n    } catch (error) {\n      const message = error.message || 'Registration failed';\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await auth.signOut();\n      setUser(null);\n      toast.success('Logged out successfully');\n    } catch (error) {\n      toast.error('Logout failed');\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      const { data, error } = await supabase.auth.updateUser(profileData);\n      if (error) throw error;\n      setUser(data.user);\n      toast.success('Profile updated successfully!');\n      return { success: true };\n    } catch (error) {\n      const message = error.message || 'Failed to update profile';\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  // Change password\n  const changePassword = async (newPassword) => {\n    try {\n      const { error } = await supabase.auth.updateUser({ password: newPassword });\n      if (error) throw error;\n      toast.success('Password changed successfully!');\n      return { success: true };\n    } catch (error) {\n      const message = error.message || 'Failed to change password';\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  // Check if user has permission (simplified for demo)\n  const hasPermission = (resource, action) => {\n    if (!user) return false;\n    // For demo purposes, return true for all permissions\n    // In production, you'd check user metadata or roles\n    return true;\n  };\n\n  // Check if user has role\n  const hasRole = (roles) => {\n    if (!user) return false;\n    const allowedRoles = Array.isArray(roles) ? roles : [roles];\n    // For demo purposes, assume all users have admin role\n    return allowedRoles.includes('admin');\n  };\n\n  // Get user's project permissions\n  const getProjectPermissions = (projectId) => {\n    if (!user) return { read: false, write: false, deploy: false, admin: false };\n    \n    // For demo purposes, return full permissions\n    return {\n      read: true,\n      write: true,\n      deploy: true,\n      admin: true\n    };\n  };\n\n  // Update user preferences\n  const updatePreferences = async (preferences) => {\n    try {\n      const { data, error } = await supabase.auth.updateUser({\n        data: { preferences }\n      });\n      if (error) throw error;\n      setUser(data.user);\n      toast.success('Preferences updated successfully!');\n      return { success: true };\n    } catch (error) {\n      const message = error.message || 'Failed to update preferences';\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  // Get login history (simplified)\n  const getLoginHistory = async () => {\n    // Supabase doesn't provide login history by default\n    // You'd need to implement this with a custom table\n    return [];\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    hasPermission,\n    hasRole,\n    getProjectPermissions,\n    updatePreferences,\n    getLoginHistory\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}